{"version":3,"file":"static/js/556.64610715.chunk.js","mappings":"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","sources":["ContentEditable/parseMarkdownWorker.ts"],"sourcesContent":["/* eslint-disable */\n\nconst Tokenizer = class {\n\n\tpublic input: string = '';\n\tprivate inputLen: number = 0;\n\tprivate buffer: any[] = [];\n\tprivate regexp: RegExp = new RegExp('');\n\n\tprivate static REGEXP_ESCAPE = /([.?*+^$[\\]\\\\(){}|-])/g;\n\n\tprivate static tokenToString = (value: RegExp | string) => {\n\t\tif (value instanceof RegExp) {\n\t\t\tvalue = value.toString().split('/').slice(1, -1).join('/')\n\t\t} else {\n\t\t\tvalue = value.replace(Tokenizer.REGEXP_ESCAPE, '\\\\$1')\n\t\t}\n\t\treturn value;\n\t}\n\t\n\tconstructor(...tokens: Array<string | RegExp>) {\n\t\ttokens = tokens.map(Tokenizer.tokenToString);\n\t\ttokens = tokens.sort((a, b) => String(b).length - String(a).length);\n\t\tthis.regexp = new RegExp(tokens.map(token => '(' + token + ')').join('|'), 'g');\n\t}\n\n\tinit = (input: string) => {\n\t\tthis.input = input;\n\t\tthis.inputLen = input.length;\n\t\tthis.regexp.lastIndex = 0;\n\t\tthis.buffer.splice(0, Infinity);\n\t}\n\n\tprivate ensureToken = () => {\n\n\t\tconst { regexp, buffer, input, inputLen } = this;\n\n\t\tif (buffer.length) return;\n\n\t\tconst startPos = regexp.lastIndex;\n\n\t\tconst match = regexp.exec(input);\n\t\tif (match) {\n\n\t\t\tconst matchText = match[0];\n\t\t\tconst matchIndex = match.index;\n\t\t\tconst escape = (input[matchIndex - 1] === '\\\\');\n\n\t\t\tif (escape) {\n\t\t\t\tbuffer.push(input.slice(startPos, matchIndex + matchText.length));\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tif (startPos < matchIndex) {\n\t\t\t\t\tbuffer.push(input.slice(startPos, matchIndex));\n\t\t\t\t}\n\n\t\t\t\tbuffer.push(matchText);\n\t\t\t}\n\n\n\t\t}\n\n\t\telse {\n\t\t\tregexp.lastIndex = inputLen;\n\t\t\tbuffer.push(input.slice(startPos));\n\t\t}\n\t\t\n\t}\n\n\n\tnext = (consume: boolean) => {\n\t\tthis.ensureToken();\n\t\treturn (consume ? this.buffer.shift() : this.buffer[0]);\n\t}\n\n}\n\nconst tags: {[key: string]: any} = {\n\t'**': {\n\t\topen: '<b data-markdown=\"*\">',\n\t\tclose: '</b>'\n\t},\n\t'~~': {\n\t\topen: '<s data-markdown=\"~~\">',\n\t\tclose: '</s>'\n\t},\n\t'_': {\n\t\topen: '<i data-markdown=\"_\">',\n\t\tclose: '</i>'\n\t},\n\t'__': {\n\t\topen: '<u data-markdown=\"__\">',\n\t\tclose: '</u>'\n\t},\n\t'||': {\n\t\topen: '<span style=\"filter: blur(2px)\"  data-markdown=\"||\">',\n\t\tclose: '</span>'\n\t},\n\t'`': {\n\t\topen: '<code  data-markdown=\"1\" style=\"font-weight: normal; background: rgba(0, 0, 0, 0.2);\">',\n\t\tclose: '</code>'\n\t}\n}\n\nconst tokenizer = new Tokenizer(...Object.keys(tags))\n\n\nconst parseMarkdown = (parsedHtml: string) => {\n\n\ttokenizer.init(parsedHtml);\n\n\tlet token: any;\n\n\tconst result: Array<{\n\t\tkind: 'starting' | 'start' | 'end' | 'data',\n\t\tdata: string,\n\t}> = []\n\n\twhile (token = tokenizer.next(true)) {\n\n\t\tconst tag = (tags[token] && token);\n\t\tconst openingTag = tag && result.find(item => item.kind === 'starting' && item.data === token);\n\n\t\tif (tag && !openingTag) {\n\t\t\tresult.push({\n\t\t\t\tkind: 'starting',\n\t\t\t\tdata: token\n\t\t\t});\n\t\t}\n\n\t\telse if (tag && openingTag) {\n\n\t\t\topeningTag.kind = 'start'\n\t\t\tresult.push({\n\t\t\t\t...openingTag,\n\t\t\t\tkind: 'end'\n\t\t\t});\n\t\t}\n\n\t\telse {\n\t\t\tresult.push({\n\t\t\t\tkind: 'data',\n\t\t\t\tdata: token\n\t\t\t});\n\t\t}\n\n\t}\n\n\treturn result.map(item => {\n\t\tif (item.kind === 'start') return item.data + tags[item.data].open;\n\t\tif (item.kind === 'end') return tags[item.data].close + item.data;\n\t\treturn item.data;\n\t}).join('');\n\n}\n\n\nself.onmessage = async(event: MessageEvent) => {\n\ttry {\n\t\tconst data = event.data;\n\t\tconst result = parseMarkdown(data);\n\t\tawait new Promise(r => setTimeout(r, 200))\n\t\tself.postMessage(result);\n\t} catch (e) {}\n};"],"names":["Tokenizer","_Class","constructor","_len","arguments","length","tokens","Array","_key","input","inputLen","buffer","regexp","RegExp","init","this","lastIndex","splice","Infinity","ensureToken","startPos","match","exec","matchText","matchIndex","index","push","slice","next","consume","shift","map","tokenToString","sort","a","b","String","token","join","REGEXP_ESCAPE","value","toString","split","replace","tags","open","close","tokenizer","Object","keys","self","onmessage","async","result","parsedHtml","tag","openingTag","find","item","kind","data","parseMarkdown","event","Promise","r","setTimeout","postMessage","e"],"sourceRoot":""}