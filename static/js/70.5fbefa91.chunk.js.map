{"version":3,"file":"static/js/70.5fbefa91.chunk.js","mappings":"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","sources":["../node_modules/@worker-tools/html-rewriter/src/_dnt.shims.ts","../node_modules/@worker-tools/html-rewriter/src/deps/deno.land/std@0.134.0/fmt/colors.ts","../node_modules/@worker-tools/html-rewriter/src/deps/deno.land/std@0.134.0/testing/_diff.ts","../node_modules/@worker-tools/html-rewriter/src/deps/deno.land/std@0.134.0/testing/asserts.ts","../node_modules/@worker-tools/html-rewriter/src/vendor/asyncify.js","../node_modules/@worker-tools/html-rewriter/src/vendor/html_rewriter.js","../node_modules/@worker-tools/resolvable-promise/src/index.ts","../node_modules/@worker-tools/html-rewriter/src/index.ts"],"sourcesContent":["const dntGlobals = {\n};\nexport const dntGlobalThis = createMergeProxy(globalThis, dntGlobals);\n\nfunction createMergeProxy<T extends object, U extends object>(\n  baseObj: T,\n  extObj: U,\n): Omit<T, keyof U> & U {\n  return new Proxy(baseObj, {\n    get(_target, prop, _receiver) {\n      if (prop in extObj) {\n        return (extObj as any)[prop];\n      } else {\n        return (baseObj as any)[prop];\n      }\n    },\n    set(_target, prop, value) {\n      if (prop in extObj) {\n        delete (extObj as any)[prop];\n      }\n      (baseObj as any)[prop] = value;\n      return true;\n    },\n    deleteProperty(_target, prop) {\n      let success = false;\n      if (prop in extObj) {\n        delete (extObj as any)[prop];\n        success = true;\n      }\n      if (prop in baseObj) {\n        delete (baseObj as any)[prop];\n        success = true;\n      }\n      return success;\n    },\n    ownKeys(_target) {\n      const baseKeys = Reflect.ownKeys(baseObj);\n      const extKeys = Reflect.ownKeys(extObj);\n      const extKeysSet = new Set(extKeys);\n      return [...baseKeys.filter((k) => !extKeysSet.has(k)), ...extKeys];\n    },\n    defineProperty(_target, prop, desc) {\n      if (prop in extObj) {\n        delete (extObj as any)[prop];\n      }\n      Reflect.defineProperty(baseObj, prop, desc);\n      return true;\n    },\n    getOwnPropertyDescriptor(_target, prop) {\n      if (prop in extObj) {\n        return Reflect.getOwnPropertyDescriptor(extObj, prop);\n      } else {\n        return Reflect.getOwnPropertyDescriptor(baseObj, prop);\n      }\n    },\n    has(_target, prop) {\n      return prop in extObj || prop in baseObj;\n    },\n  }) as any;\n}\n","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors\n// on npm.\n// This module is browser compatible.\n\n/**\n * ```ts\n * import { bgBlue, red, bold } from \"https://deno.land/std@$STD_VERSION/fmt/colors.ts\";\n * console.log(bgBlue(red(bold(\"Hello world!\"))));\n * ```\n *\n * This module supports `NO_COLOR` environmental variable disabling any coloring\n * if `NO_COLOR` is set.\n *\n * @module\n */\n// This module is browser compatible.\n\n// deno-lint-ignore no-explicit-any\nimport * as dntShim from \"../../../../_dnt.shims.js\";\n\nconst { Deno } = dntShim.dntGlobalThis as any;\nconst noColor = typeof Deno?.noColor === \"boolean\"\n  ? Deno.noColor as boolean\n  : true;\n\ninterface Code {\n  open: string;\n  close: string;\n  regexp: RegExp;\n}\n\n/** RGB 8-bits per channel. Each in range `0->255` or `0x00->0xff` */\ninterface Rgb {\n  r: number;\n  g: number;\n  b: number;\n}\n\nlet enabled = !noColor;\n\n/**\n * Set changing text color to enabled or disabled\n * @param value\n */\nexport function setColorEnabled(value: boolean): void {\n  if (noColor) {\n    return;\n  }\n\n  enabled = value;\n}\n\n/** Get whether text color change is enabled or disabled. */\nexport function getColorEnabled(): boolean {\n  return enabled;\n}\n\n/**\n * Builds color code\n * @param open\n * @param close\n */\nfunction code(open: number[], close: number): Code {\n  return {\n    open: `\\x1b[${open.join(\";\")}m`,\n    close: `\\x1b[${close}m`,\n    regexp: new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n  };\n}\n\n/**\n * Applies color and background based on color code and its associated text\n * @param str text to apply color settings to\n * @param code color code to apply\n */\nfunction run(str: string, code: Code): string {\n  return enabled\n    ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`\n    : str;\n}\n\n/**\n * Reset the text modified\n * @param str text to reset\n */\nexport function reset(str: string): string {\n  return run(str, code([0], 0));\n}\n\n/**\n * Make the text bold.\n * @param str text to make bold\n */\nexport function bold(str: string): string {\n  return run(str, code([1], 22));\n}\n\n/**\n * The text emits only a small amount of light.\n * @param str text to dim\n */\nexport function dim(str: string): string {\n  return run(str, code([2], 22));\n}\n\n/**\n * Make the text italic.\n * @param str text to make italic\n */\nexport function italic(str: string): string {\n  return run(str, code([3], 23));\n}\n\n/**\n * Make the text underline.\n * @param str text to underline\n */\nexport function underline(str: string): string {\n  return run(str, code([4], 24));\n}\n\n/**\n * Invert background color and text color.\n * @param str text to invert its color\n */\nexport function inverse(str: string): string {\n  return run(str, code([7], 27));\n}\n\n/**\n * Make the text hidden.\n * @param str text to hide\n */\nexport function hidden(str: string): string {\n  return run(str, code([8], 28));\n}\n\n/**\n * Put horizontal line through the center of the text.\n * @param str text to strike through\n */\nexport function strikethrough(str: string): string {\n  return run(str, code([9], 29));\n}\n\n/**\n * Set text color to black.\n * @param str text to make black\n */\nexport function black(str: string): string {\n  return run(str, code([30], 39));\n}\n\n/**\n * Set text color to red.\n * @param str text to make red\n */\nexport function red(str: string): string {\n  return run(str, code([31], 39));\n}\n\n/**\n * Set text color to green.\n * @param str text to make green\n */\nexport function green(str: string): string {\n  return run(str, code([32], 39));\n}\n\n/**\n * Set text color to yellow.\n * @param str text to make yellow\n */\nexport function yellow(str: string): string {\n  return run(str, code([33], 39));\n}\n\n/**\n * Set text color to blue.\n * @param str text to make blue\n */\nexport function blue(str: string): string {\n  return run(str, code([34], 39));\n}\n\n/**\n * Set text color to magenta.\n * @param str text to make magenta\n */\nexport function magenta(str: string): string {\n  return run(str, code([35], 39));\n}\n\n/**\n * Set text color to cyan.\n * @param str text to make cyan\n */\nexport function cyan(str: string): string {\n  return run(str, code([36], 39));\n}\n\n/**\n * Set text color to white.\n * @param str text to make white\n */\nexport function white(str: string): string {\n  return run(str, code([37], 39));\n}\n\n/**\n * Set text color to gray.\n * @param str text to make gray\n */\nexport function gray(str: string): string {\n  return brightBlack(str);\n}\n\n/**\n * Set text color to bright black.\n * @param str text to make bright-black\n */\nexport function brightBlack(str: string): string {\n  return run(str, code([90], 39));\n}\n\n/**\n * Set text color to bright red.\n * @param str text to make bright-red\n */\nexport function brightRed(str: string): string {\n  return run(str, code([91], 39));\n}\n\n/**\n * Set text color to bright green.\n * @param str text to make bright-green\n */\nexport function brightGreen(str: string): string {\n  return run(str, code([92], 39));\n}\n\n/**\n * Set text color to bright yellow.\n * @param str text to make bright-yellow\n */\nexport function brightYellow(str: string): string {\n  return run(str, code([93], 39));\n}\n\n/**\n * Set text color to bright blue.\n * @param str text to make bright-blue\n */\nexport function brightBlue(str: string): string {\n  return run(str, code([94], 39));\n}\n\n/**\n * Set text color to bright magenta.\n * @param str text to make bright-magenta\n */\nexport function brightMagenta(str: string): string {\n  return run(str, code([95], 39));\n}\n\n/**\n * Set text color to bright cyan.\n * @param str text to make bright-cyan\n */\nexport function brightCyan(str: string): string {\n  return run(str, code([96], 39));\n}\n\n/**\n * Set text color to bright white.\n * @param str text to make bright-white\n */\nexport function brightWhite(str: string): string {\n  return run(str, code([97], 39));\n}\n\n/**\n * Set background color to black.\n * @param str text to make its background black\n */\nexport function bgBlack(str: string): string {\n  return run(str, code([40], 49));\n}\n\n/**\n * Set background color to red.\n * @param str text to make its background red\n */\nexport function bgRed(str: string): string {\n  return run(str, code([41], 49));\n}\n\n/**\n * Set background color to green.\n * @param str text to make its background green\n */\nexport function bgGreen(str: string): string {\n  return run(str, code([42], 49));\n}\n\n/**\n * Set background color to yellow.\n * @param str text to make its background yellow\n */\nexport function bgYellow(str: string): string {\n  return run(str, code([43], 49));\n}\n\n/**\n * Set background color to blue.\n * @param str text to make its background blue\n */\nexport function bgBlue(str: string): string {\n  return run(str, code([44], 49));\n}\n\n/**\n *  Set background color to magenta.\n * @param str text to make its background magenta\n */\nexport function bgMagenta(str: string): string {\n  return run(str, code([45], 49));\n}\n\n/**\n * Set background color to cyan.\n * @param str text to make its background cyan\n */\nexport function bgCyan(str: string): string {\n  return run(str, code([46], 49));\n}\n\n/**\n * Set background color to white.\n * @param str text to make its background white\n */\nexport function bgWhite(str: string): string {\n  return run(str, code([47], 49));\n}\n\n/**\n * Set background color to bright black.\n * @param str text to make its background bright-black\n */\nexport function bgBrightBlack(str: string): string {\n  return run(str, code([100], 49));\n}\n\n/**\n * Set background color to bright red.\n * @param str text to make its background bright-red\n */\nexport function bgBrightRed(str: string): string {\n  return run(str, code([101], 49));\n}\n\n/**\n * Set background color to bright green.\n * @param str text to make its background bright-green\n */\nexport function bgBrightGreen(str: string): string {\n  return run(str, code([102], 49));\n}\n\n/**\n * Set background color to bright yellow.\n * @param str text to make its background bright-yellow\n */\nexport function bgBrightYellow(str: string): string {\n  return run(str, code([103], 49));\n}\n\n/**\n * Set background color to bright blue.\n * @param str text to make its background bright-blue\n */\nexport function bgBrightBlue(str: string): string {\n  return run(str, code([104], 49));\n}\n\n/**\n * Set background color to bright magenta.\n * @param str text to make its background bright-magenta\n */\nexport function bgBrightMagenta(str: string): string {\n  return run(str, code([105], 49));\n}\n\n/**\n * Set background color to bright cyan.\n * @param str text to make its background bright-cyan\n */\nexport function bgBrightCyan(str: string): string {\n  return run(str, code([106], 49));\n}\n\n/**\n * Set background color to bright white.\n * @param str text to make its background bright-white\n */\nexport function bgBrightWhite(str: string): string {\n  return run(str, code([107], 49));\n}\n\n/* Special Color Sequences */\n\n/**\n * Clam and truncate color codes\n * @param n\n * @param max number to truncate to\n * @param min number to truncate from\n */\nfunction clampAndTruncate(n: number, max = 255, min = 0): number {\n  return Math.trunc(Math.max(Math.min(n, max), min));\n}\n\n/**\n * Set text color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit colors to\n * @param color code\n */\nexport function rgb8(str: string, color: number): string {\n  return run(str, code([38, 5, clampAndTruncate(color)], 39));\n}\n\n/**\n * Set background color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit background colors to\n * @param color code\n */\nexport function bgRgb8(str: string, color: number): string {\n  return run(str, code([48, 5, clampAndTruncate(color)], 49));\n}\n\n/**\n * Set text color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n *      import { rgb24 } from \"./colors.ts\";\n *      rgb24(\"foo\", 0xff00ff);\n *      rgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function rgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [38, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        39,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        38,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      39,\n    ),\n  );\n}\n\n/**\n * Set background color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n *      import { bgRgb24 } from \"./colors.ts\";\n *      bgRgb24(\"foo\", 0xff00ff);\n *      bgRgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function bgRgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [48, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        49,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        48,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      49,\n    ),\n  );\n}\n\n// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js\nconst ANSI_PATTERN = new RegExp(\n  [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\n  ].join(\"|\"),\n  \"g\",\n);\n\n/**\n * Remove ANSI escape codes from the string.\n * @param string to remove ANSI escape codes from\n */\nexport function stripColor(string: string): string {\n  return string.replace(ANSI_PATTERN, \"\");\n}\n","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n\ninterface FarthestPoint {\n  y: number;\n  id: number;\n}\n\nexport enum DiffType {\n  removed = \"removed\",\n  common = \"common\",\n  added = \"added\",\n}\n\nexport interface DiffResult<T> {\n  type: DiffType;\n  value: T;\n  details?: Array<DiffResult<T>>;\n}\n\nconst REMOVED = 1;\nconst COMMON = 2;\nconst ADDED = 3;\n\nfunction createCommon<T>(A: T[], B: T[], reverse?: boolean): T[] {\n  const common = [];\n  if (A.length === 0 || B.length === 0) return [];\n  for (let i = 0; i < Math.min(A.length, B.length); i += 1) {\n    if (\n      A[reverse ? A.length - i - 1 : i] === B[reverse ? B.length - i - 1 : i]\n    ) {\n      common.push(A[reverse ? A.length - i - 1 : i]);\n    } else {\n      return common;\n    }\n  }\n  return common;\n}\n\n/**\n * Renders the differences between the actual and expected values\n * @param A Actual value\n * @param B Expected value\n */\nexport function diff<T>(A: T[], B: T[]): Array<DiffResult<T>> {\n  const prefixCommon = createCommon(A, B);\n  const suffixCommon = createCommon(\n    A.slice(prefixCommon.length),\n    B.slice(prefixCommon.length),\n    true,\n  ).reverse();\n  A = suffixCommon.length\n    ? A.slice(prefixCommon.length, -suffixCommon.length)\n    : A.slice(prefixCommon.length);\n  B = suffixCommon.length\n    ? B.slice(prefixCommon.length, -suffixCommon.length)\n    : B.slice(prefixCommon.length);\n  const swapped = B.length > A.length;\n  [A, B] = swapped ? [B, A] : [A, B];\n  const M = A.length;\n  const N = B.length;\n  if (!M && !N && !suffixCommon.length && !prefixCommon.length) return [];\n  if (!N) {\n    return [\n      ...prefixCommon.map(\n        (c): DiffResult<typeof c> => ({ type: DiffType.common, value: c }),\n      ),\n      ...A.map(\n        (a): DiffResult<typeof a> => ({\n          type: swapped ? DiffType.added : DiffType.removed,\n          value: a,\n        }),\n      ),\n      ...suffixCommon.map(\n        (c): DiffResult<typeof c> => ({ type: DiffType.common, value: c }),\n      ),\n    ];\n  }\n  const offset = N;\n  const delta = M - N;\n  const size = M + N + 1;\n  const fp: FarthestPoint[] = Array.from(\n    { length: size },\n    () => ({ y: -1, id: -1 }),\n  );\n  /**\n   * INFO:\n   * This buffer is used to save memory and improve performance.\n   * The first half is used to save route and last half is used to save diff\n   * type.\n   * This is because, when I kept new uint8array area to save type,performance\n   * worsened.\n   */\n  const routes = new Uint32Array((M * N + size + 1) * 2);\n  const diffTypesPtrOffset = routes.length / 2;\n  let ptr = 0;\n  let p = -1;\n\n  function backTrace<T>(\n    A: T[],\n    B: T[],\n    current: FarthestPoint,\n    swapped: boolean,\n  ): Array<{\n    type: DiffType;\n    value: T;\n  }> {\n    const M = A.length;\n    const N = B.length;\n    const result = [];\n    let a = M - 1;\n    let b = N - 1;\n    let j = routes[current.id];\n    let type = routes[current.id + diffTypesPtrOffset];\n    while (true) {\n      if (!j && !type) break;\n      const prev = j;\n      if (type === REMOVED) {\n        result.unshift({\n          type: swapped ? DiffType.removed : DiffType.added,\n          value: B[b],\n        });\n        b -= 1;\n      } else if (type === ADDED) {\n        result.unshift({\n          type: swapped ? DiffType.added : DiffType.removed,\n          value: A[a],\n        });\n        a -= 1;\n      } else {\n        result.unshift({ type: DiffType.common, value: A[a] });\n        a -= 1;\n        b -= 1;\n      }\n      j = routes[prev];\n      type = routes[prev + diffTypesPtrOffset];\n    }\n    return result;\n  }\n\n  function createFP(\n    slide: FarthestPoint,\n    down: FarthestPoint,\n    k: number,\n    M: number,\n  ): FarthestPoint {\n    if (slide && slide.y === -1 && down && down.y === -1) {\n      return { y: 0, id: 0 };\n    }\n    if (\n      (down && down.y === -1) ||\n      k === M ||\n      (slide && slide.y) > (down && down.y) + 1\n    ) {\n      const prev = slide.id;\n      ptr++;\n      routes[ptr] = prev;\n      routes[ptr + diffTypesPtrOffset] = ADDED;\n      return { y: slide.y, id: ptr };\n    } else {\n      const prev = down.id;\n      ptr++;\n      routes[ptr] = prev;\n      routes[ptr + diffTypesPtrOffset] = REMOVED;\n      return { y: down.y + 1, id: ptr };\n    }\n  }\n\n  function snake<T>(\n    k: number,\n    slide: FarthestPoint,\n    down: FarthestPoint,\n    _offset: number,\n    A: T[],\n    B: T[],\n  ): FarthestPoint {\n    const M = A.length;\n    const N = B.length;\n    if (k < -N || M < k) return { y: -1, id: -1 };\n    const fp = createFP(slide, down, k, M);\n    while (fp.y + k < M && fp.y < N && A[fp.y + k] === B[fp.y]) {\n      const prev = fp.id;\n      ptr++;\n      fp.id = ptr;\n      fp.y += 1;\n      routes[ptr] = prev;\n      routes[ptr + diffTypesPtrOffset] = COMMON;\n    }\n    return fp;\n  }\n\n  while (fp[delta + offset].y < N) {\n    p = p + 1;\n    for (let k = -p; k < delta; ++k) {\n      fp[k + offset] = snake(\n        k,\n        fp[k - 1 + offset],\n        fp[k + 1 + offset],\n        offset,\n        A,\n        B,\n      );\n    }\n    for (let k = delta + p; k > delta; --k) {\n      fp[k + offset] = snake(\n        k,\n        fp[k - 1 + offset],\n        fp[k + 1 + offset],\n        offset,\n        A,\n        B,\n      );\n    }\n    fp[delta + offset] = snake(\n      delta,\n      fp[delta - 1 + offset],\n      fp[delta + 1 + offset],\n      offset,\n      A,\n      B,\n    );\n  }\n  return [\n    ...prefixCommon.map(\n      (c): DiffResult<typeof c> => ({ type: DiffType.common, value: c }),\n    ),\n    ...backTrace(A, B, fp[delta + offset], swapped),\n    ...suffixCommon.map(\n      (c): DiffResult<typeof c> => ({ type: DiffType.common, value: c }),\n    ),\n  ];\n}\n\n/**\n * Renders the differences between the actual and expected strings\n * Partially inspired from https://github.com/kpdecker/jsdiff\n * @param A Actual string\n * @param B Expected string\n */\nexport function diffstr(A: string, B: string) {\n  function unescape(string: string): string {\n    // unescape invisible characters.\n    // ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#escape_sequences\n    return string\n      .replaceAll(\"\\b\", \"\\\\b\")\n      .replaceAll(\"\\f\", \"\\\\f\")\n      .replaceAll(\"\\t\", \"\\\\t\")\n      .replaceAll(\"\\v\", \"\\\\v\")\n      .replaceAll( // does not remove line breaks\n        /\\r\\n|\\r|\\n/g,\n        (str) => str === \"\\r\" ? \"\\\\r\" : str === \"\\n\" ? \"\\\\n\\n\" : \"\\\\r\\\\n\\r\\n\",\n      );\n  }\n\n  function tokenize(string: string, { wordDiff = false } = {}): string[] {\n    if (wordDiff) {\n      // Split string on whitespace symbols\n      const tokens = string.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/);\n      // Extended Latin character set\n      const words =\n        /^[a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}]+$/u;\n\n      // Join boundary splits that we do not consider to be boundaries and merge empty strings surrounded by word chars\n      for (let i = 0; i < tokens.length - 1; i++) {\n        if (\n          !tokens[i + 1] && tokens[i + 2] && words.test(tokens[i]) &&\n          words.test(tokens[i + 2])\n        ) {\n          tokens[i] += tokens[i + 2];\n          tokens.splice(i + 1, 2);\n          i--;\n        }\n      }\n      return tokens.filter((token) => token);\n    } else {\n      // Split string on new lines symbols\n      const tokens = [], lines = string.split(/(\\n|\\r\\n)/);\n\n      // Ignore final empty token when text ends with a newline\n      if (!lines[lines.length - 1]) {\n        lines.pop();\n      }\n\n      // Merge the content and line separators into single tokens\n      for (let i = 0; i < lines.length; i++) {\n        if (i % 2) {\n          tokens[tokens.length - 1] += lines[i];\n        } else {\n          tokens.push(lines[i]);\n        }\n      }\n      return tokens;\n    }\n  }\n\n  // Create details by filtering relevant word-diff for current line\n  // and merge \"space-diff\" if surrounded by word-diff for cleaner displays\n  function createDetails(\n    line: DiffResult<string>,\n    tokens: Array<DiffResult<string>>,\n  ) {\n    return tokens.filter(({ type }) =>\n      type === line.type || type === DiffType.common\n    ).map((result, i, t) => {\n      if (\n        (result.type === DiffType.common) && (t[i - 1]) &&\n        (t[i - 1]?.type === t[i + 1]?.type) && /\\s+/.test(result.value)\n      ) {\n        result.type = t[i - 1].type;\n      }\n      return result;\n    });\n  }\n\n  // Compute multi-line diff\n  const diffResult = diff(\n    tokenize(`${unescape(A)}\\n`),\n    tokenize(`${unescape(B)}\\n`),\n  );\n\n  const added = [], removed = [];\n  for (const result of diffResult) {\n    if (result.type === DiffType.added) {\n      added.push(result);\n    }\n    if (result.type === DiffType.removed) {\n      removed.push(result);\n    }\n  }\n\n  // Compute word-diff\n  const aLines = added.length < removed.length ? added : removed;\n  const bLines = aLines === removed ? added : removed;\n  for (const a of aLines) {\n    let tokens = [] as Array<DiffResult<string>>,\n      b: undefined | DiffResult<string>;\n    // Search another diff line with at least one common token\n    while (bLines.length) {\n      b = bLines.shift();\n      tokens = diff(\n        tokenize(a.value, { wordDiff: true }),\n        tokenize(b?.value ?? \"\", { wordDiff: true }),\n      );\n      if (\n        tokens.some(({ type, value }) =>\n          type === DiffType.common && value.trim().length\n        )\n      ) {\n        break;\n      }\n    }\n    // Register word-diff details\n    a.details = createDetails(a, tokens);\n    if (b) {\n      b.details = createDetails(b, tokens);\n    }\n  }\n\n  return diffResult;\n}\n","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible. Do not rely on good formatting of values\n// for AssertionError messages in browsers.\nimport * as dntShim from \"../../../../_dnt.shims.js\";\n\n\nimport {\n  bgGreen,\n  bgRed,\n  bold,\n  gray,\n  green,\n  red,\n  stripColor,\n  white,\n} from \"../fmt/colors.js\";\nimport { diff, DiffResult, diffstr, DiffType } from \"./_diff.js\";\n\nconst CAN_NOT_DISPLAY = \"[Cannot display]\";\n\nexport class AssertionError extends Error {\n  override name = \"AssertionError\";\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Converts the input into a string. Objects, Sets and Maps are sorted so as to\n * make tests less flaky\n * @param v Value to be formatted\n */\nexport function _format(v: unknown): string {\n  // deno-lint-ignore no-explicit-any\n  const { Deno } = dntShim.dntGlobalThis as any;\n  return typeof Deno?.inspect === \"function\"\n    ? Deno.inspect(v, {\n      depth: Infinity,\n      sorted: true,\n      trailingComma: true,\n      compact: false,\n      iterableLimit: Infinity,\n    })\n    : `\"${String(v).replace(/(?=[\"\\\\])/g, \"\\\\\")}\"`;\n}\n\n/**\n * Colors the output of assertion diffs\n * @param diffType Difference type, either added or removed\n */\nfunction createColor(\n  diffType: DiffType,\n  { background = false } = {},\n): (s: string) => string {\n  switch (diffType) {\n    case DiffType.added:\n      return (s: string): string =>\n        background ? bgGreen(white(s)) : green(bold(s));\n    case DiffType.removed:\n      return (s: string): string => background ? bgRed(white(s)) : red(bold(s));\n    default:\n      return white;\n  }\n}\n\n/**\n * Prefixes `+` or `-` in diff output\n * @param diffType Difference type, either added or removed\n */\nfunction createSign(diffType: DiffType): string {\n  switch (diffType) {\n    case DiffType.added:\n      return \"+   \";\n    case DiffType.removed:\n      return \"-   \";\n    default:\n      return \"    \";\n  }\n}\n\nfunction buildMessage(\n  diffResult: ReadonlyArray<DiffResult<string>>,\n  { stringDiff = false } = {},\n): string[] {\n  const messages: string[] = [], diffMessages: string[] = [];\n  messages.push(\"\");\n  messages.push(\"\");\n  messages.push(\n    `    ${gray(bold(\"[Diff]\"))} ${red(bold(\"Actual\"))} / ${\n      green(bold(\"Expected\"))\n    }`,\n  );\n  messages.push(\"\");\n  messages.push(\"\");\n  diffResult.forEach((result: DiffResult<string>): void => {\n    const c = createColor(result.type);\n    const line = result.details?.map((detail) =>\n      detail.type !== DiffType.common\n        ? createColor(detail.type, { background: true })(detail.value)\n        : detail.value\n    ).join(\"\") ?? result.value;\n    diffMessages.push(c(`${createSign(result.type)}${line}`));\n  });\n  messages.push(...(stringDiff ? [diffMessages.join(\"\")] : diffMessages));\n  messages.push(\"\");\n\n  return messages;\n}\n\nfunction isKeyedCollection(x: unknown): x is Set<unknown> {\n  return [Symbol.iterator, \"size\"].every((k) => k in (x as Set<unknown>));\n}\n\n/**\n * Deep equality comparison used in assertions\n * @param c actual value\n * @param d expected value\n */\nexport function equal(c: unknown, d: unknown): boolean {\n  const seen = new Map();\n  return (function compare(a: unknown, b: unknown): boolean {\n    // Have to render RegExp & Date for string comparison\n    // unless it's mistreated as object\n    if (\n      a &&\n      b &&\n      ((a instanceof RegExp && b instanceof RegExp) ||\n        (a instanceof URL && b instanceof URL))\n    ) {\n      return String(a) === String(b);\n    }\n    if (a instanceof Date && b instanceof Date) {\n      const aTime = a.getTime();\n      const bTime = b.getTime();\n      // Check for NaN equality manually since NaN is not\n      // equal to itself.\n      if (Number.isNaN(aTime) && Number.isNaN(bTime)) {\n        return true;\n      }\n      return aTime === bTime;\n    }\n    if (typeof a === \"number\" && typeof b === \"number\") {\n      return Number.isNaN(a) && Number.isNaN(b) || a === b;\n    }\n    if (Object.is(a, b)) {\n      return true;\n    }\n    if (a && typeof a === \"object\" && b && typeof b === \"object\") {\n      if (a && b && !constructorsEqual(a, b)) {\n        return false;\n      }\n      if (a instanceof WeakMap || b instanceof WeakMap) {\n        if (!(a instanceof WeakMap && b instanceof WeakMap)) return false;\n        throw new TypeError(\"cannot compare WeakMap instances\");\n      }\n      if (a instanceof WeakSet || b instanceof WeakSet) {\n        if (!(a instanceof WeakSet && b instanceof WeakSet)) return false;\n        throw new TypeError(\"cannot compare WeakSet instances\");\n      }\n      if (seen.get(a) === b) {\n        return true;\n      }\n      if (Object.keys(a || {}).length !== Object.keys(b || {}).length) {\n        return false;\n      }\n      if (isKeyedCollection(a) && isKeyedCollection(b)) {\n        if (a.size !== b.size) {\n          return false;\n        }\n\n        let unmatchedEntries = a.size;\n\n        for (const [aKey, aValue] of a.entries()) {\n          for (const [bKey, bValue] of b.entries()) {\n            /* Given that Map keys can be references, we need\n             * to ensure that they are also deeply equal */\n            if (\n              (aKey === aValue && bKey === bValue && compare(aKey, bKey)) ||\n              (compare(aKey, bKey) && compare(aValue, bValue))\n            ) {\n              unmatchedEntries--;\n            }\n          }\n        }\n\n        return unmatchedEntries === 0;\n      }\n      const merged = { ...a, ...b };\n      for (\n        const key of [\n          ...Object.getOwnPropertyNames(merged),\n          ...Object.getOwnPropertySymbols(merged),\n        ]\n      ) {\n        type Key = keyof typeof merged;\n        if (!compare(a && a[key as Key], b && b[key as Key])) {\n          return false;\n        }\n        if (((key in a) && (!(key in b))) || ((key in b) && (!(key in a)))) {\n          return false;\n        }\n      }\n      seen.set(a, b);\n      if (a instanceof WeakRef || b instanceof WeakRef) {\n        if (!(a instanceof WeakRef && b instanceof WeakRef)) return false;\n        return compare(a.deref(), b.deref());\n      }\n      return true;\n    }\n    return false;\n  })(c, d);\n}\n\n// deno-lint-ignore ban-types\nfunction constructorsEqual(a: object, b: object) {\n  return a.constructor === b.constructor ||\n    a.constructor === Object && !b.constructor ||\n    !a.constructor && b.constructor === Object;\n}\n\n/** Make an assertion, error will be thrown if `expr` does not have truthy value. */\nexport function assert(expr: unknown, msg = \"\"): asserts expr {\n  if (!expr) {\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Make an assertion that `actual` and `expected` are equal, deeply. If not\n * deeply equal, then throw.\n *\n * Type parameter can be specified to ensure values under comparison have the same type.\n * For example:\n * ```ts\n * import { assertEquals } from \"./asserts.ts\";\n *\n * assertEquals<number>(1, 2)\n * ```\n */\nexport function assertEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void;\nexport function assertEquals<T>(actual: T, expected: T, msg?: string): void;\nexport function assertEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void {\n  if (equal(actual, expected)) {\n    return;\n  }\n  let message = \"\";\n  const actualString = _format(actual);\n  const expectedString = _format(expected);\n  try {\n    const stringDiff = (typeof actual === \"string\") &&\n      (typeof expected === \"string\");\n    const diffResult = stringDiff\n      ? diffstr(actual as string, expected as string)\n      : diff(actualString.split(\"\\n\"), expectedString.split(\"\\n\"));\n    const diffMsg = buildMessage(diffResult, { stringDiff }).join(\"\\n\");\n    message = `Values are not equal:\\n${diffMsg}`;\n  } catch {\n    message = `\\n${red(CAN_NOT_DISPLAY)} + \\n\\n`;\n  }\n  if (msg) {\n    message = msg;\n  }\n  throw new AssertionError(message);\n}\n\n/**\n * Make an assertion that `actual` and `expected` are not equal, deeply.\n * If not then throw.\n *\n * Type parameter can be specified to ensure values under comparison have the same type.\n * For example:\n * ```ts\n * import { assertNotEquals } from \"./asserts.ts\";\n *\n * assertNotEquals<number>(1, 2)\n * ```\n */\nexport function assertNotEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void;\nexport function assertNotEquals<T>(actual: T, expected: T, msg?: string): void;\nexport function assertNotEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void {\n  if (!equal(actual, expected)) {\n    return;\n  }\n  let actualString: string;\n  let expectedString: string;\n  try {\n    actualString = String(actual);\n  } catch {\n    actualString = \"[Cannot display]\";\n  }\n  try {\n    expectedString = String(expected);\n  } catch {\n    expectedString = \"[Cannot display]\";\n  }\n  if (!msg) {\n    msg = `actual: ${actualString} expected not to be: ${expectedString}`;\n  }\n  throw new AssertionError(msg);\n}\n\n/**\n * Make an assertion that `actual` and `expected` are strictly equal. If\n * not then throw.\n *\n * ```ts\n * import { assertStrictEquals } from \"./asserts.ts\";\n *\n * assertStrictEquals(1, 2)\n * ```\n */\nexport function assertStrictEquals<T>(\n  actual: unknown,\n  expected: T,\n  msg?: string,\n): asserts actual is T {\n  if (actual === expected) {\n    return;\n  }\n\n  let message: string;\n\n  if (msg) {\n    message = msg;\n  } else {\n    const actualString = _format(actual);\n    const expectedString = _format(expected);\n\n    if (actualString === expectedString) {\n      const withOffset = actualString\n        .split(\"\\n\")\n        .map((l) => `    ${l}`)\n        .join(\"\\n\");\n      message =\n        `Values have the same structure but are not reference-equal:\\n\\n${\n          red(withOffset)\n        }\\n`;\n    } else {\n      try {\n        const stringDiff = (typeof actual === \"string\") &&\n          (typeof expected === \"string\");\n        const diffResult = stringDiff\n          ? diffstr(actual as string, expected as string)\n          : diff(actualString.split(\"\\n\"), expectedString.split(\"\\n\"));\n        const diffMsg = buildMessage(diffResult, { stringDiff }).join(\"\\n\");\n        message = `Values are not strictly equal:\\n${diffMsg}`;\n      } catch {\n        message = `\\n${red(CAN_NOT_DISPLAY)} + \\n\\n`;\n      }\n    }\n  }\n\n  throw new AssertionError(message);\n}\n\n/**\n * Make an assertion that `actual` and `expected` are not strictly equal.\n * If the values are strictly equal then throw.\n *\n * ```ts\n * import { assertNotStrictEquals } from \"./asserts.ts\";\n *\n * assertNotStrictEquals(1, 1)\n * ```\n */\nexport function assertNotStrictEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void;\nexport function assertNotStrictEquals<T>(\n  actual: T,\n  expected: T,\n  msg?: string,\n): void;\nexport function assertNotStrictEquals(\n  actual: unknown,\n  expected: unknown,\n  msg?: string,\n): void {\n  if (actual !== expected) {\n    return;\n  }\n\n  throw new AssertionError(\n    msg ?? `Expected \"actual\" to be strictly unequal to: ${_format(actual)}\\n`,\n  );\n}\n\n/**\n * Make an assertion that `actual` and `expected` are almost equal numbers through\n * a given tolerance. It can be used to take into account IEEE-754 double-precision\n * floating-point representation limitations.\n * If the values are not almost equal then throw.\n *\n * ```ts\n * import { assertAlmostEquals, assertThrows } from \"./asserts.ts\";\n *\n * assertAlmostEquals(0.1, 0.2);\n *\n * // Using a custom tolerance value\n * assertAlmostEquals(0.1 + 0.2, 0.3, 1e-16);\n * assertThrows(() => assertAlmostEquals(0.1 + 0.2, 0.3, 1e-17));\n * ```\n */\nexport function assertAlmostEquals(\n  actual: number,\n  expected: number,\n  tolerance = 1e-7,\n  msg?: string,\n) {\n  if (actual === expected) {\n    return;\n  }\n  const delta = Math.abs(expected - actual);\n  if (delta <= tolerance) {\n    return;\n  }\n  const f = (n: number) => Number.isInteger(n) ? n : n.toExponential();\n  throw new AssertionError(\n    msg ??\n      `actual: \"${f(actual)}\" expected to be close to \"${f(expected)}\": \\\ndelta \"${f(delta)}\" is greater than \"${f(tolerance)}\"`,\n  );\n}\n\n// deno-lint-ignore no-explicit-any\ntype AnyConstructor = new (...args: any[]) => any;\ntype GetConstructorType<T extends AnyConstructor> = T extends // deno-lint-ignore no-explicit-any\nnew (...args: any) => infer C ? C\n  : never;\n\n/**\n * Make an assertion that `obj` is an instance of `type`.\n * If not then throw.\n */\nexport function assertInstanceOf<T extends AnyConstructor>(\n  actual: unknown,\n  expectedType: T,\n  msg = \"\",\n): asserts actual is GetConstructorType<T> {\n  if (!msg) {\n    const expectedTypeStr = expectedType.name;\n\n    let actualTypeStr = \"\";\n    if (actual === null) {\n      actualTypeStr = \"null\";\n    } else if (actual === undefined) {\n      actualTypeStr = \"undefined\";\n    } else if (typeof actual === \"object\") {\n      actualTypeStr = actual.constructor?.name ?? \"Object\";\n    } else {\n      actualTypeStr = typeof actual;\n    }\n\n    if (expectedTypeStr == actualTypeStr) {\n      msg = `Expected object to be an instance of \"${expectedTypeStr}\".`;\n    } else if (actualTypeStr == \"function\") {\n      msg =\n        `Expected object to be an instance of \"${expectedTypeStr}\" but was not an instanced object.`;\n    } else {\n      msg =\n        `Expected object to be an instance of \"${expectedTypeStr}\" but was \"${actualTypeStr}\".`;\n    }\n  }\n  assert(actual instanceof expectedType, msg);\n}\n\n/**\n * Make an assertion that actual is not null or undefined.\n * If not then throw.\n */\nexport function assertExists<T>(\n  actual: T,\n  msg?: string,\n): asserts actual is NonNullable<T> {\n  if (actual === undefined || actual === null) {\n    if (!msg) {\n      msg = `actual: \"${actual}\" expected to not be null or undefined`;\n    }\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Make an assertion that actual includes expected. If not\n * then throw.\n */\nexport function assertStringIncludes(\n  actual: string,\n  expected: string,\n  msg?: string,\n): void {\n  if (!actual.includes(expected)) {\n    if (!msg) {\n      msg = `actual: \"${actual}\" expected to contain: \"${expected}\"`;\n    }\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Make an assertion that `actual` includes the `expected` values.\n * If not then an error will be thrown.\n *\n * Type parameter can be specified to ensure values under comparison have the same type.\n * For example:\n *\n * ```ts\n * import { assertArrayIncludes } from \"./asserts.ts\";\n *\n * assertArrayIncludes<number>([1, 2], [2])\n * ```\n */\nexport function assertArrayIncludes(\n  actual: ArrayLike<unknown>,\n  expected: ArrayLike<unknown>,\n  msg?: string,\n): void;\nexport function assertArrayIncludes<T>(\n  actual: ArrayLike<T>,\n  expected: ArrayLike<T>,\n  msg?: string,\n): void;\nexport function assertArrayIncludes(\n  actual: ArrayLike<unknown>,\n  expected: ArrayLike<unknown>,\n  msg?: string,\n): void {\n  const missing: unknown[] = [];\n  for (let i = 0; i < expected.length; i++) {\n    let found = false;\n    for (let j = 0; j < actual.length; j++) {\n      if (equal(expected[i], actual[j])) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      missing.push(expected[i]);\n    }\n  }\n  if (missing.length === 0) {\n    return;\n  }\n  if (!msg) {\n    msg = `actual: \"${_format(actual)}\" expected to include: \"${\n      _format(expected)\n    }\"\\nmissing: ${_format(missing)}`;\n  }\n  throw new AssertionError(msg);\n}\n\n/**\n * Make an assertion that `actual` match RegExp `expected`. If not\n * then throw.\n */\nexport function assertMatch(\n  actual: string,\n  expected: RegExp,\n  msg?: string,\n): void {\n  if (!expected.test(actual)) {\n    if (!msg) {\n      msg = `actual: \"${actual}\" expected to match: \"${expected}\"`;\n    }\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Make an assertion that `actual` not match RegExp `expected`. If match\n * then throw.\n */\nexport function assertNotMatch(\n  actual: string,\n  expected: RegExp,\n  msg?: string,\n): void {\n  if (expected.test(actual)) {\n    if (!msg) {\n      msg = `actual: \"${actual}\" expected to not match: \"${expected}\"`;\n    }\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Make an assertion that `actual` object is a subset of `expected` object, deeply.\n * If not, then throw.\n */\nexport function assertObjectMatch(\n  // deno-lint-ignore no-explicit-any\n  actual: Record<PropertyKey, any>,\n  expected: Record<PropertyKey, unknown>,\n): void {\n  type loose = Record<PropertyKey, unknown>;\n\n  function filter(a: loose, b: loose) {\n    const seen = new WeakMap();\n    return fn(a, b);\n\n    function fn(a: loose, b: loose): loose {\n      // Prevent infinite loop with circular references with same filter\n      if ((seen.has(a)) && (seen.get(a) === b)) {\n        return a;\n      }\n      seen.set(a, b);\n      // Filter keys and symbols which are present in both actual and expected\n      const filtered = {} as loose;\n      const entries = [\n        ...Object.getOwnPropertyNames(a),\n        ...Object.getOwnPropertySymbols(a),\n      ]\n        .filter((key) => key in b)\n        .map((key) => [key, a[key as string]]) as Array<[string, unknown]>;\n      for (const [key, value] of entries) {\n        // On array references, build a filtered array and filter nested objects inside\n        if (Array.isArray(value)) {\n          const subset = (b as loose)[key];\n          if (Array.isArray(subset)) {\n            filtered[key] = fn({ ...value }, { ...subset });\n            continue;\n          }\n        } // On regexp references, keep value as it to avoid loosing pattern and flags\n        else if (value instanceof RegExp) {\n          filtered[key] = value;\n          continue;\n        } // On nested objects references, build a filtered object recursively\n        else if (typeof value === \"object\") {\n          const subset = (b as loose)[key];\n          if ((typeof subset === \"object\") && (subset)) {\n            // When both operands are maps, build a filtered map with common keys and filter nested objects inside\n            if ((value instanceof Map) && (subset instanceof Map)) {\n              filtered[key] = new Map(\n                [...value].filter(([k]) => subset.has(k)).map((\n                  [k, v],\n                ) => [k, typeof v === \"object\" ? fn(v, subset.get(k)) : v]),\n              );\n              continue;\n            }\n            // When both operands are set, build a filtered set with common values\n            if ((value instanceof Set) && (subset instanceof Set)) {\n              filtered[key] = new Set([...value].filter((v) => subset.has(v)));\n              continue;\n            }\n            filtered[key] = fn(value as loose, subset as loose);\n            continue;\n          }\n        }\n        filtered[key] = value;\n      }\n      return filtered;\n    }\n  }\n  return assertEquals(\n    // get the intersection of \"actual\" and \"expected\"\n    // side effect: all the instances' constructor field is \"Object\" now.\n    filter(actual, expected),\n    // set (nested) instances' constructor field to be \"Object\" without changing expected value.\n    // see https://github.com/denoland/deno_std/pull/1419\n    filter(expected, expected),\n  );\n}\n\n/**\n * Forcefully throws a failed assertion\n */\nexport function fail(msg?: string): never {\n  assert(false, `Failed assertion${msg ? `: ${msg}` : \".\"}`);\n}\n\n/**\n * Make an assertion that `error` is an `Error`.\n * If not then an error will be thrown.\n * An error class and a string that should be included in the\n * error message can also be asserted.\n */\nexport function assertIsError<E extends Error = Error>(\n  error: unknown,\n  // deno-lint-ignore no-explicit-any\n  ErrorClass?: new (...args: any[]) => E,\n  msgIncludes?: string,\n  msg?: string,\n): asserts error is E {\n  if (error instanceof Error === false) {\n    throw new AssertionError(`Expected \"error\" to be an Error object.`);\n  }\n  if (ErrorClass && !(error instanceof ErrorClass)) {\n    msg = `Expected error to be instance of \"${ErrorClass.name}\", but was \"${\n      typeof error === \"object\" ? error?.constructor?.name : \"[not an object]\"\n    }\"${msg ? `: ${msg}` : \".\"}`;\n    throw new AssertionError(msg);\n  }\n  if (\n    msgIncludes && (!(error instanceof Error) ||\n      !stripColor(error.message).includes(stripColor(msgIncludes)))\n  ) {\n    msg = `Expected error message to include \"${msgIncludes}\", but got \"${\n      error instanceof Error ? error.message : \"[not an Error]\"\n    }\"${msg ? `: ${msg}` : \".\"}`;\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Executes a function, expecting it to throw.  If it does not, then it\n * throws. An error class and a string that should be included in the\n * error message can also be asserted. Or you can pass a\n * callback which will be passed the error, usually to apply some custom\n * assertions on it.\n */\nexport function assertThrows<E extends Error = Error>(\n  fn: () => unknown,\n  // deno-lint-ignore no-explicit-any\n  ErrorClass?: new (...args: any[]) => E,\n  msgIncludes?: string,\n  msg?: string,\n): void;\nexport function assertThrows(\n  fn: () => unknown,\n  errorCallback: (e: Error) => unknown,\n  msg?: string,\n): void;\nexport function assertThrows<E extends Error = Error>(\n  fn: () => unknown,\n  errorClassOrCallback?:\n    // deno-lint-ignore no-explicit-any\n    | (new (...args: any[]) => E)\n    | ((e: Error) => unknown),\n  msgIncludesOrMsg?: string,\n  msg?: string,\n): void {\n  // deno-lint-ignore no-explicit-any\n  let ErrorClass: (new (...args: any[]) => E) | undefined = undefined;\n  let msgIncludes: string | undefined = undefined;\n  let errorCallback;\n  if (\n    errorClassOrCallback == null ||\n    errorClassOrCallback.prototype instanceof Error ||\n    errorClassOrCallback.prototype === Error.prototype\n  ) {\n    // deno-lint-ignore no-explicit-any\n    ErrorClass = errorClassOrCallback as new (...args: any[]) => E;\n    msgIncludes = msgIncludesOrMsg;\n    errorCallback = null;\n  } else {\n    errorCallback = errorClassOrCallback as (e: Error) => unknown;\n    msg = msgIncludesOrMsg;\n  }\n  let doesThrow = false;\n  try {\n    fn();\n  } catch (error) {\n    if (error instanceof Error === false) {\n      throw new AssertionError(\"A non-Error object was thrown.\");\n    }\n    assertIsError(\n      error,\n      ErrorClass,\n      msgIncludes,\n      msg,\n    );\n    if (typeof errorCallback == \"function\") {\n      errorCallback(error);\n    }\n    doesThrow = true;\n  }\n  if (!doesThrow) {\n    msg = `Expected function to throw${msg ? `: ${msg}` : \".\"}`;\n    throw new AssertionError(msg);\n  }\n}\n\n/**\n * Executes a function which returns a promise, expecting it to throw or reject.\n * If it does not, then it throws. An error class and a string that should be\n * included in the error message can also be asserted. Or you can pass a\n * callback which will be passed the error, usually to apply some custom\n * assertions on it.\n */\nexport function assertRejects<E extends Error = Error>(\n  fn: () => Promise<unknown>,\n  // deno-lint-ignore no-explicit-any\n  ErrorClass?: new (...args: any[]) => E,\n  msgIncludes?: string,\n  msg?: string,\n): Promise<void>;\nexport function assertRejects(\n  fn: () => Promise<unknown>,\n  errorCallback: (e: Error) => unknown,\n  msg?: string,\n): Promise<void>;\nexport async function assertRejects<E extends Error = Error>(\n  fn: () => Promise<unknown>,\n  errorClassOrCallback?:\n    // deno-lint-ignore no-explicit-any\n    | (new (...args: any[]) => E)\n    | ((e: Error) => unknown),\n  msgIncludesOrMsg?: string,\n  msg?: string,\n): Promise<void> {\n  // deno-lint-ignore no-explicit-any\n  let ErrorClass: (new (...args: any[]) => E) | undefined = undefined;\n  let msgIncludes: string | undefined = undefined;\n  let errorCallback;\n  if (\n    errorClassOrCallback == null ||\n    errorClassOrCallback.prototype instanceof Error ||\n    errorClassOrCallback.prototype === Error.prototype\n  ) {\n    // deno-lint-ignore no-explicit-any\n    ErrorClass = errorClassOrCallback as new (...args: any[]) => E;\n    msgIncludes = msgIncludesOrMsg;\n    errorCallback = null;\n  } else {\n    errorCallback = errorClassOrCallback as (e: Error) => unknown;\n    msg = msgIncludesOrMsg;\n  }\n  let doesThrow = false;\n  try {\n    await fn();\n  } catch (error) {\n    if (error instanceof Error === false) {\n      throw new AssertionError(\"A non-Error object was thrown or rejected.\");\n    }\n    assertIsError(\n      error,\n      ErrorClass,\n      msgIncludes,\n      msg,\n    );\n    if (typeof errorCallback == \"function\") {\n      errorCallback(error);\n    }\n    doesThrow = true;\n  }\n  if (!doesThrow) {\n    msg = `Expected function to throw${msg ? `: ${msg}` : \".\"}`;\n    throw new AssertionError(msg);\n  }\n}\n\n/** Use this to stub out methods that will throw when invoked. */\nexport function unimplemented(msg?: string): never {\n  throw new AssertionError(msg || \"unimplemented\");\n}\n\n/** Use this to assert unreachable code. */\nexport function unreachable(): never {\n  throw new AssertionError(\"unreachable\");\n}\n","import { assert, assertEquals } from \"../deps/deno.land/std@0.134.0/testing/asserts.js\";\n\n/**\n * @typedef {object} WasmExports\n * @property {WebAssembly.Memory} memory\n * @property {function} asyncify_get_state\n * @property {function} asyncify_start_unwind\n * @property {function} asyncify_stop_unwind\n * @property {function} asyncify_start_rewind\n * @property {function} asyncify_stop_rewind\n */\n\n/**\n * @type {WasmExports}\n */\nlet wasm;\n\n/**\n * @param {WasmExports} wasmExports\n */\nfunction setWasmExports(wasmExports) {\n  wasm = wasmExports;\n}\n\n/**\n * @type {Int32Array}\n */\nlet cachedInt32Memory = null;\n\n/**\n * @returns {Int32Array}\n */\nfunction getInt32Memory() {\n  if (\n    cachedInt32Memory === null ||\n    cachedInt32Memory.buffer !== wasm.memory.buffer\n  ) {\n    cachedInt32Memory = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory;\n}\n\n// https://github.com/WebAssembly/binaryen/blob/fb9de9d391a7272548dcc41cd8229076189d7398/src/passes/Asyncify.cpp#L99\nconst State = {\n  NONE: 0,\n  UNWINDING: 1,\n  REWINDING: 2,\n};\n\nfunction assertNoneState() {\n  assertEquals(wasm.asyncify_get_state(), State.NONE);\n}\n\n/**\n * Maps `HTMLRewriter`s (their `asyncifyStackPtr`s) to `Promise`s.\n * `asyncifyStackPtr` acts as unique reference to `HTMLRewriter`.\n * Each rewriter MUST have AT MOST ONE pending promise at any time.\n * @type {Map<number, Promise>}\n */\nconst promises = new Map();\n\n/**\n * @param {number} stackPtr\n * @param {Promise} promise\n */\nfunction awaitPromise(stackPtr, promise) {\n  if (wasm.asyncify_get_state() === State.REWINDING) {\n    wasm.asyncify_stop_rewind();\n    return;\n  }\n\n  assertNoneState();\n\n  // https://github.com/WebAssembly/binaryen/blob/fb9de9d391a7272548dcc41cd8229076189d7398/src/passes/Asyncify.cpp#L106\n  assertEquals(stackPtr % 4, 0);\n  getInt32Memory().set([stackPtr + 8, stackPtr + 1024], stackPtr / 4);\n\n  wasm.asyncify_start_unwind(stackPtr);\n\n  assert(!promises.has(stackPtr));\n  promises.set(stackPtr, promise);\n}\n\n/**\n * @param {HTMLRewriter} rewriter\n * @param {Function} fn\n * @param args\n */\nasync function wrap(rewriter, fn, ...args) {\n  const stackPtr = rewriter.asyncifyStackPtr;\n\n  assertNoneState();\n  let result = fn(...args);\n\n  while (wasm.asyncify_get_state() === State.UNWINDING) {\n    wasm.asyncify_stop_unwind();\n\n    assertNoneState();\n    assert(promises.has(stackPtr));\n    await promises.get(stackPtr);\n    promises.delete(stackPtr);\n\n    assertNoneState();\n    wasm.asyncify_start_rewind(stackPtr);\n    result = fn();\n  }\n\n  assertNoneState();\n  return result;\n}\n\nexport { awaitPromise, setWasmExports, wrap };\n","import { awaitPromise, setWasmExports, wrap } from './asyncify.js';\n\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n*/\nexport class Comment {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Comment.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_comment_free(ptr);\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    before(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.comment_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    after(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.comment_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    replace(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.comment_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    */\n    remove() {\n        wasm.comment_remove(this.ptr);\n        return this;\n    }\n    /**\n    * @returns {boolean}\n    */\n    get removed() {\n        var ret = wasm.comment_removed(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.comment_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} text\n    */\n    set text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.comment_set_text(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nexport class Doctype {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Doctype.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_doctype_free(ptr);\n    }\n    /**\n    * @returns {any}\n    */\n    get name() {\n        var ret = wasm.doctype_name(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    get publicId() {\n        var ret = wasm.doctype_public_id(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    get systemId() {\n        var ret = wasm.doctype_system_id(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class DocumentEnd {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DocumentEnd.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_documentend_free(ptr);\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    append(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.documentend_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n}\n/**\n*/\nexport class Element {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Element.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_element_free(ptr);\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    before(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    after(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    replace(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    */\n    remove() {\n        wasm.element_remove(this.ptr);\n        return this;\n    }\n    /**\n    * @returns {boolean}\n    */\n    get removed() {\n        var ret = wasm.element_removed(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get tagName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.element_tag_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    */\n    set tagName(name) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_set_tag_name(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {any}\n    */\n    get namespaceURI() {\n        var ret = wasm.element_namespace_uri(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    get attributes() {\n        var ret = wasm.element_attributes(this.ptr);\n        return takeObject(ret)[Symbol.iterator]();\n    }\n    /**\n    * @param {string} name\n    * @returns {any}\n    */\n    getAttribute(name) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.element_getAttribute(this.ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} name\n    * @returns {boolean}\n    */\n    hasAttribute(name) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.element_hasAttribute(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    */\n    setAttribute(name, value) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.element_setAttribute(this.ptr, ptr0, len0, ptr1, len1);\n        return this;\n    }\n    /**\n    * @param {string} name\n    */\n    removeAttribute(name) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_removeAttribute(this.ptr, ptr0, len0);\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    prepend(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_prepend(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    append(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    setInnerContent(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.element_setInnerContent(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    */\n    removeAndKeepContent() {\n        wasm.element_removeAndKeepContent(this.ptr);\n        return this;\n    }\n    /**\n    * @param {any} handler\n    */\n    onEndTag(handler) {\n        wasm.element_onEndTag(this.ptr, addHeapObject(handler.bind(this)));\n    }\n}\n/**\n*/\nexport class EndTag {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EndTag.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_endtag_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.endtag_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    */\n    set name(name) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.endtag_set_name(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    before(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.endtag_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    after(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.endtag_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    */\n    remove() {\n        wasm.endtag_remove(this.ptr);\n        return this;\n    }\n}\n/**\n*/\nexport class HTMLRewriter {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HTMLRewriter.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_htmlrewriter_free(ptr);\n    }\n    /**\n    * @param {any} output_sink\n    * @param {any | undefined} options\n    */\n    constructor(output_sink, options) {\n        try {\n            var ret = wasm.htmlrewriter_new(addBorrowedObject(output_sink), isLikeNone(options) ? 0 : addHeapObject(options));\n            return HTMLRewriter.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {string} selector\n    * @param {any} handlers\n    */\n    on(selector, handlers) {\n        var ptr0 = passStringToWasm0(selector, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.htmlrewriter_on(this.ptr, ptr0, len0, addHeapObject(handlers));\n        return this;\n    }\n    /**\n    * @param {any} handlers\n    */\n    onDocument(handlers) {\n        wasm.htmlrewriter_onDocument(this.ptr, addHeapObject(handlers));\n        return this;\n    }\n    /**\n    * @param {Uint8Array} chunk\n    */\n    async write(chunk) {\n        var ptr0 = passArray8ToWasm0(chunk, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        await wrap(this, wasm.htmlrewriter_write, this.ptr, ptr0, len0)\n    }\n    /**\n    */\n    async end() {\n        await wrap(this, wasm.htmlrewriter_end, this.ptr)\n    }\n    /**\n    * @returns {number}\n    */\n    get asyncifyStackPtr() {\n        var ret = wasm.htmlrewriter_asyncify_stack_ptr(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class TextChunk {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TextChunk.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_textchunk_free(ptr);\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    before(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.textchunk_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    after(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.textchunk_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    * @param {string} content\n    * @param {any | undefined} content_type\n    */\n    replace(content, content_type) {\n        var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.textchunk_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));\n        return this;\n    }\n    /**\n    */\n    remove() {\n        wasm.textchunk_remove(this.ptr);\n        return this;\n    }\n    /**\n    * @returns {boolean}\n    */\n    get removed() {\n        var ret = wasm.textchunk_removed(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.textchunk_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {boolean}\n    */\n    get lastInTextNode() {\n        var ret = wasm.textchunk_last_in_text_node(this.ptr);\n        return ret !== 0;\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        throw new Error('Initializing html_rewriter needs input')\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_endtag_new = function(arg0) {\n        var ret = EndTag.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_awaitPromise_39a1101fd8518869 = function(arg0, arg1) {\n        awaitPromise(arg0, getObject(arg1));\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_html_cd9a0f328493678b = function(arg0) {\n        var ret = getObject(arg0).html;\n        return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_documentend_new = function(arg0) {\n        var ret = DocumentEnd.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        var ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_element_c38470ed972aea27 = function(arg0) {\n        var ret = getObject(arg0).element;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_comments_ba86bc03331d9378 = function(arg0) {\n        var ret = getObject(arg0).comments;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_text_7800bf26cb443911 = function(arg0) {\n        var ret = getObject(arg0).text;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_doctype_ac58c0964a59b61b = function(arg0) {\n        var ret = getObject(arg0).doctype;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_comments_94d876f6c0502e82 = function(arg0) {\n        var ret = getObject(arg0).comments;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_text_4606a16c30e4ae91 = function(arg0) {\n        var ret = getObject(arg0).text;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_end_34efb9402eac8a4e = function(arg0) {\n        var ret = getObject(arg0).end;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_element_new = function(arg0) {\n        var ret = Element.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_comment_new = function(arg0) {\n        var ret = Comment.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_textchunk_new = function(arg0) {\n        var ret = TextChunk.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_doctype_new = function(arg0) {\n        var ret = Doctype.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_enableEsiTags_de6b91cc61a25874 = function(arg0) {\n        var ret = getObject(arg0).enableEsiTags;\n        return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n    };\n    imports.wbg.__wbg_String_60c4ba333b5ca1c6 = function(arg0, arg1) {\n        var ret = String(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new_4fee7e2900033464 = function() {\n        var ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ba9b5e3c25cff8f9 = function(arg0, arg1) {\n        var ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_call_6c4ea719458624eb = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_917809a3e20a4b00 = function(arg0, arg1) {\n        var ret = new TypeError(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Promise_c6535fc791fcc4d2 = function(arg0) {\n        var obj = getObject(arg0);\n        var ret = (obj instanceof Promise) || (Object.prototype.toString.call(obj) === '[object Promise]');\n        return ret;\n    };\n    imports.wbg.__wbg_buffer_89a8560ab6a3d9c6 = function(arg0) {\n        var ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_e45d8b33c02dc3b5 = function(arg0, arg1, arg2) {\n        var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_bd2e1d010adb8a1a = function(arg0) {\n        var ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        var ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    setWasmExports(wasm)\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","// deno-lint-ignore-file no-explicit-any\nexport type Resolve<T> = (value: T | PromiseLike<T>) => void;\nexport type Reject = (reason?: any) => void;\nexport type ResolvablePromiseInit<T> = PromiseLike<T> | ((resolve: Resolve<T>, reject: Reject) => void);\n\nexport class ResolvablePromise<T> implements Promise<T> {\n  #promise: Promise<T>;\n  #resolve!: Resolve<T>;\n  #reject!: Reject;\n  #settled = false;\n\n  constructor(init?: ResolvablePromiseInit<T> | null) {\n    // super(_ => _(void 0 as any));\n    this.#promise = new Promise((res, rej) => {\n      const resolve = this.#resolve = v => (this.#settled = true, res(v));\n      const reject = this.#reject = r => (this.#settled = true, rej(r));\n      if (init == null) return;\n      if (typeof init === 'function') init(resolve, reject);\n      else if (typeof init.then === 'function') init.then(resolve, reject);\n    });\n  }\n\n  resolve(x: T | PromiseLike<T>) {\n    this.#resolve(x);\n  }\n\n  reject(reason?: any) {\n    this.#reject(reason);\n  }\n\n  /** @deprecated Name of this property might change */\n  get settled() { return this.#settled }\n\n  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onfulfilled, onrejected);\n  }\n  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null): Promise<T | TResult> {\n    return this.#promise.catch(onrejected);\n  }\n  finally(onfinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onfinally);\n  }\n\n  readonly [Symbol.toStringTag] = 'ResolvablePromise'\n}\n\n/** @deprecated */\nexport function resolvablePromise<T>() {\n  return new ResolvablePromise<T>();\n}\n","// FIXME: replace multiple 1 import from skypack!?\nimport type {\n  HTMLRewriter as BaseHTMLRewriter,\n  ContentTypeOptions,\n  Element,\n  EndTag,\n  Comment,\n  TextChunk,\n  Doctype,\n  DocumentEnd,\n  ElementHandlers,\n  DocumentHandlers,\n} from \"./vendor/html_rewriter_2\";\nimport * as _base from './vendor/html_rewriter.js'\nconst { default: initWASM } = _base;\nconst base: typeof import(\"./vendor/html_rewriter_2\") = _base;\n\nexport type { \n  ContentTypeOptions,\n  Element,\n  EndTag,\n  Comment,\n  TextChunk,\n  Doctype,\n  DocumentEnd,\n  ElementHandlers,\n  DocumentHandlers,\n}\n\nimport { ResolvablePromise } from '@worker-tools/resolvable-promise'\n\ntype SelectorElementHandlers = [selector: string, handlers: ElementHandlers];\n\nconst kEnableEsiTags = Symbol(\"kEnableEsiTags\");\n\n// In case a server doesn't return the proper mime type (e.g. githubusercontent.com)..\nconst toWASMResponse = (response: Response) => {\n  if (response.headers.get('content-type')?.startsWith('application/wasm')) return response;\n  const { body, headers: hs, ...props } = response\n  const headers = new Headers(hs)\n  headers.set('content-type', 'application/wasm')\n  return new Response(body, { ...props, headers })\n}\n\nconst initialized = new ResolvablePromise<void>();\nlet executing = false;\n\nexport class HTMLRewriter {\n  readonly #elementHandlers: SelectorElementHandlers[] = [];\n  readonly #documentHandlers: DocumentHandlers[] = [];\n  [kEnableEsiTags] = false;\n\n  constructor() {\n    if (!initialized.settled && !executing) {\n      executing = true;\n      fetch(new URL(\"./vendor/html_rewriter_bg.wasm\", import.meta.url).href)\n        .then(r => r.ok ? r : (() => { throw Error('WASM response not ok') })())\n        .then(toWASMResponse)\n        .then(initWASM)\n        .then(() => initialized.resolve())\n        .catch(err => { \n          executing = false; \n          console.error(err);\n        })\n    }\n  }\n\n  on(selector: string, handlers: ElementHandlers): this {\n    this.#elementHandlers.push([selector, handlers]);\n    return this;\n  }\n\n  onDocument(handlers: DocumentHandlers): this {\n    this.#documentHandlers.push(handlers);\n    return this;\n  }\n\n  transform(response: Response): Response {\n    const body = response.body as ReadableStream<Uint8Array> | null;\n    // HTMLRewriter doesn't run the end handler if the body is null, so it's\n    // pointless to setup the transform stream.\n    if (body === null) return new Response(body, response);\n\n    if (response instanceof Response) {\n      // Make sure we validate chunks are BufferSources and convert them to\n      // Uint8Arrays as required by the Rust glue code.\n      response = new Response(response.body, response);\n    }\n\n    let rewriter: BaseHTMLRewriter;\n    const transformStream = new TransformStream<Uint8Array, Uint8Array>({\n      start: async (controller) => {\n        // Create a rewriter instance for this transformation that writes its\n        // output to the transformed response's stream. Note that each\n        // BaseHTMLRewriter can only be used once. \n        await initialized;\n        rewriter = new base.HTMLRewriter(\n          (output) => {\n            // enqueue will throw on empty chunks\n            if (output.length !== 0) controller.enqueue(output);\n          },\n          { enableEsiTags: this[kEnableEsiTags] }\n        );\n        // Add all registered handlers\n        for (const [selector, handlers] of this.#elementHandlers) {\n          rewriter.on(selector, handlers);\n        }\n        for (const handlers of this.#documentHandlers) {\n          rewriter.onDocument(handlers);\n        }\n      },\n      // The finally() below will ensure the rewriter is always freed.\n      // chunk is guaranteed to be a Uint8Array as we're using the\n      // @miniflare/core Response class, which transforms to a byte stream.\n      transform: (chunk) => rewriter.write(chunk),\n      flush: () => rewriter.end(),\n    });\n    const promise = body.pipeTo(transformStream.writable);\n    promise.catch(() => {}).finally(() => rewriter?.free());\n\n    // Return a response with the transformed body, copying over headers, etc\n    const res = new Response(transformStream.readable, response);\n    // If Content-Length is set, it's probably going to be wrong, since we're\n    // rewriting content, so remove it\n    res.headers.delete(\"Content-Length\");\n    return res;\n  }\n}\n\nexport function withEnableEsiTags(rewriter: HTMLRewriter): HTMLRewriter {\n  rewriter[kEnableEsiTags] = true;\n  return rewriter;\n}\n"],"names":["dntGlobalThis","baseObj","globalThis","extObj","Proxy","get","_target","prop","_receiver","set","value","deleteProperty","success","ownKeys","baseKeys","Reflect","extKeys","extKeysSet","Set","filter","k","has","defineProperty","desc","getOwnPropertyDescriptor","Deno","dntShim","noColor","enabled","code","open","close","join","regexp","RegExp","run","str","replace","bold","red","green","white","gray","brightBlack","DiffType","createCommon","A","B","reverse","common","length","i","Math","min","push","diff","prefixCommon","suffixCommon","slice","swapped","M","N","map","c","type","a","added","removed","offset","delta","size","fp","Array","from","y","id","routes","Uint32Array","diffTypesPtrOffset","ptr","p","snake","slide","down","_offset","prev","createFP","current","result","b","j","unshift","backTrace","CAN_NOT_DISPLAY","AssertionError","Error","name","constructor","message","super","_format","v","inspect","depth","Infinity","sorted","trailingComma","compact","iterableLimit","String","createColor","diffType","background","arguments","undefined","s","buildMessage","diffResult","stringDiff","messages","diffMessages","forEach","line","details","detail","createSign","isKeyedCollection","x","Symbol","iterator","every","equal","d","seen","Map","compare","URL","Date","aTime","getTime","bTime","Number","isNaN","Object","is","constructorsEqual","WeakMap","TypeError","WeakSet","keys","unmatchedEntries","aKey","aValue","entries","bKey","bValue","merged","key","getOwnPropertyNames","getOwnPropertySymbols","WeakRef","deref","assert","expr","assertEquals","actual","expected","msg","actualString","expectedString","unescape","string","replaceAll","tokenize","wordDiff","tokens","split","words","test","splice","token","lines","pop","createDetails","_ref","t","aLines","bLines","shift","some","_ref2","trim","diffstr","wasm","cachedInt32Memory","State","assertNoneState","asyncify_get_state","promises","awaitPromise","stackPtr","promise","buffer","memory","Int32Array","asyncify_start_unwind","asyncify_stop_rewind","async","wrap","rewriter","fn","asyncifyStackPtr","_len","args","_key","asyncify_stop_unwind","delete","asyncify_start_rewind","heap","fill","getObject","idx","heap_next","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","Uint8Array","getStringFromWasm0","len","subarray","addHeapObject","obj","debugString","val","description","isArray","debug","builtInMatches","exec","toString","call","className","JSON","stringify","_","stack","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","read","written","passStringToWasm0","malloc","realloc","mem","charCodeAt","cachegetInt32Memory0","getInt32Memory0","isLikeNone","stack_pointer","Comment","__wrap","create","prototype","__destroy_into_raw","this","free","__wbg_comment_free","before","content","content_type","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","comment_before","after","comment_after","comment_replace","remove","comment_remove","comment_removed","text","retptr","__wbindgen_add_to_stack_pointer","comment_text","r0","r1","__wbindgen_free","comment_set_text","Doctype","__wbg_doctype_free","doctype_name","publicId","doctype_public_id","systemId","doctype_system_id","DocumentEnd","__wbg_documentend_free","append","documentend_append","Element","__wbg_element_free","element_before","element_after","element_replace","element_remove","element_removed","tagName","element_tag_name","element_set_tag_name","namespaceURI","element_namespace_uri","attributes","element_attributes","getAttribute","element_getAttribute","hasAttribute","element_hasAttribute","setAttribute","ptr1","len1","element_setAttribute","removeAttribute","element_removeAttribute","prepend","element_prepend","element_append","setInnerContent","element_setInnerContent","removeAndKeepContent","element_removeAndKeepContent","onEndTag","handler","element_onEndTag","bind","EndTag","__wbg_endtag_free","endtag_name","endtag_set_name","endtag_before","endtag_after","endtag_remove","HTMLRewriter","__wbg_htmlrewriter_free","output_sink","options","htmlrewriter_new","addBorrowedObject","on","selector","handlers","htmlrewriter_on","onDocument","htmlrewriter_onDocument","write","chunk","passArray8ToWasm0","htmlrewriter_write","end","htmlrewriter_end","htmlrewriter_asyncify_stack_ptr","TextChunk","__wbg_textchunk_free","textchunk_before","textchunk_after","textchunk_replace","textchunk_remove","textchunk_removed","textchunk_text","lastInTextNode","textchunk_last_in_text_node","init","input","imports","wbg","__wbg_endtag_new","arg0","__wbg_awaitPromise_39a1101fd8518869","arg1","__wbindgen_object_drop_ref","__wbg_html_cd9a0f328493678b","html","__wbindgen_string_new","__wbg_documentend_new","__wbindgen_object_clone_ref","__wbg_element_c38470ed972aea27","element","__wbg_comments_ba86bc03331d9378","comments","__wbg_text_7800bf26cb443911","__wbg_doctype_ac58c0964a59b61b","doctype","__wbg_comments_94d876f6c0502e82","__wbg_text_4606a16c30e4ae91","__wbg_end_34efb9402eac8a4e","__wbg_element_new","__wbg_comment_new","__wbg_textchunk_new","__wbg_doctype_new","__wbg_enableEsiTags_de6b91cc61a25874","enableEsiTags","__wbg_String_60c4ba333b5ca1c6","__wbg_new_4fee7e2900033464","__wbg_push_ba9b5e3c25cff8f9","__wbg_call_6c4ea719458624eb","f","apply","e","__wbindgen_exn_store","handleError","arg2","__wbg_new_917809a3e20a4b00","__wbg_instanceof_Promise_c6535fc791fcc4d2","Promise","__wbg_buffer_89a8560ab6a3d9c6","__wbg_newwithbyteoffsetandlength_e45d8b33c02dc3b5","__wbg_new_bd2e1d010adb8a1a","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_memory","Request","fetch","instance","module","Response","WebAssembly","instantiateStreaming","headers","console","warn","bytes","arrayBuffer","instantiate","Instance","load","exports","__wbindgen_wasm_module","ResolvablePromise","_ResolvablePromise_promise","_ResolvablePromise_resolve","_ResolvablePromise_reject","_ResolvablePromise_settled","_a","__classPrivateFieldSet","res","rej","resolve","reject","r","then","__classPrivateFieldGet","reason","settled","onfulfilled","onrejected","catch","finally","onfinally","toStringTag","default","initWASM","_base","base","kEnableEsiTags","toWASMResponse","response","startsWith","body","hs","props","Headers","initialized","executing","href","ok","err","error","transform","transformStream","TransformStream","start","output","controller","enqueue","flush","pipeTo","writable","readable"],"sourceRoot":""}